#platform "Gen4-uLCD-24D"

//#constant OLDCOMPILE


// generated 11/16/2020 10:24:03 PM
// uSDRequired:- 1   InternalRequired:- InternalRequired

#MODE FLASHBANK_0

#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"


#inherit "test1Const.inc"



#constant IPDatasize 22

#CONST
    CMDLenMAX   80
    seroutX     $serout
    serinX      $serin
#END



#CONST
    ColorBGimage     0x0020
    ACK         0x06
    NAK         0x15
    ReadCmd     0x80
    WriteCmd    0x00
//  IPD_TYPE    0 // offsets are doubled as FLASH is byte addressable
    Ofs_IPD_P1      2
    Ofs_IPD_P2      4
    Ofs_IPD_P3      6
    Ofs_IPD_P4      8
    Ofs_IPD_P5      10
    Ofs_IPD_P6      12
    Ofs_IPD_P7      14
    Ofs_IPD_DOWN    16
    Ofs_IPD_RELEASE 18
    Ofs_IPD_OBJVIDX 20
// object indexes
    tDipSwitch      0
    tKnob           1
    tRockerSwitch   2
    tRotarySwitch   3
    tGSlider        4
    tTrackbar       5
    tWinButton      6
    tAngularmeter   7   // need to implement use of this, inputs must be ordered first
    tCoolgauge      8
    tCustomdigits   9
    tForm           10
    tGauge          11
    tImage          12
    tKeyboard       13  // this is a special input, does not need to be at front
    tLed            14
    tLeddigits      15
    tMeter          16
    tStrings        17  // also need output strings code
//    tStringUNI      0x3f | 0x40
//    tStringANSII    0x3f
    tThermometer    18
    tUserled        19
    tVideo          20
    tStaticText     21
// Remove, check for non visual objects instead
//    MaxVisObjects   21  // objects that have a visual component 
    tSounds         22
    tTimer          23
    tSpectrum       24
    tScope          25
    tTank           26
    tUserImages     27
    tPinOutput      28
    tPinInput       29 
    t4Dbutton       30    // more inputs 
    tAniButton      31
    tColorPicker    32 
    tUserButton     33     
    tMagicObject    34     
    MaxTotObjects   33 // objects in objects array
//    OT_DISPLAY      22
    OT_REPORT       100
    OT_SETCONST     101
    OT_SETANOTHER   102
    OT_ACTIVATE     103
    OT_NEXTFRAME    104
    OT_PREVFRAME    105
    OT_NEXTSTRING   106
    OT_PREVSTRING   107
    OT_MAGIC        108
// other OT_s Form activate,
// Indexes into LedDigits and CustomDigits arrays
    Ofs_Digits_Left           0
    Ofs_Digits_Digits         2
    Ofs_Digits_MinDigits      4
    Ofs_Digits_Widthdigit     6
    Ofs_Digits_LeadingBlanks  8
// indexes to Strings arrays
    Ofs_String_StartH        0
    Ofs_String_StartL        2
    Ofs_String_Size          4
    Ofs_String_x1            6
    Ofs_String_y1            8
    Ofs_String_x2            10
    Ofs_String_y2            12
    Ofs_String_FGColor       14
    Ofs_String_BGColor       16
    Ofs_String_FontAttribs   18
    Ofs_String_Transparent   20 // bit transparent should 'refresh' background, otherwise rectangle out
    Ofs_String_Ansi          22 // bit defines write/draw routine
    Ofs_String_Form          24 // form this string can be seen in
    Ofs_String_GciFSFontIdx  26 // only used/exists for GciFS 
// Command codes
    READ_OBJ        0
    WRITE_OBJ       1
    WRITE_STR       2
    WRITE_STRU      3
    WRITE_CONTRAST  4
    REPORT_OBJ      5
    REPORT_EVENT    7
    WRITE_MAGIC_BYTES 8
    WRITE_MAGIC_DBYTES  9
    REPORT_MAGIC_EVENT_BYTES 10
    REPORT_MAGIC_EVENT_DBYTES 11
    WRITE_LABEL     12

// End P1.inc
    nObjects        83
    nInputs         0
    nAniTimers      0
#END

#DATA
    word FormStartIndex 0, 3, 11, 18, 45, 54, 63, 72
    word FormEndIndex 3, 11, 18, 45, 54, 63, 72, 83
    word InputControls 0
    word InputData 0
    word oDipSwitchs 0
    word oForms 8, iForm0, iForm1, iForm2, iForm3, iForm4, iForm5, iForm6, iForm7
    word oLeddigitss 1, iLeddigits0
    word oUserleds 28, iUserled0, iUserled1, iUserled2, iUserled3, iUserled4, iUserled5, iUserled6, iUserled7, iUserled8, iUserled9, iUserled10, iUserled11, iUserled12, iUserled13, iUserled14, iUserled15, iUserled16, iUserled17, iUserled18, iUserled19, iUserled20, iUserled21, iUserled22, iUserled23, iUserled24, iUserled25, iUserled26, iUserled27
    word oStaticTexts 45, iStatictext0, iStatictext1, iStatictext2, iStatictext3, iStatictext4, iStatictext5, iStatictext6, iStatictext7, iStatictext8, iStatictext9, iStatictext10, iStatictext11, iStatictext12, iStatictext13, iStatictext14, iStatictext15, iStatictext16, iStatictext17, iStatictext18, iStatictext19, iStatictext20, iStatictext21, iStatictext22, iStatictext23, iStatictext24, iStatictext25, iStatictext26, iStatictext27, iStatictext28, iStatictext29, iStatictext30, iStatictext31, iStatictext32, iStatictext33, iStatictext34, iStatictext35, iStatictext36, iStatictext37, iStatictext38, iStatictext39, iStatictext40, iStatictext41, iStatictext42, iStatictext43, iStatictext44
    word FormBGcolors ColorBGimage, ColorBGimage, ColorBGimage, ColorBGimage, ColorBGimage, ColorBGimage, ColorBGimage, ColorBGimage
    word kKeyboardKeystrokes -1
    word rKeyboardRoutines -1
    word oLedDigitsn 96, 4, 3, 30, 0
#END

// Start P2.inc
var oObjects[MaxTotObjects+1] ;                 // address of objects
var CurrentForm, oldn, ImageTouched ;
var TouchXpos, TouchYpos ;
var GObjectType, TouchState, CurInputData, pInputIndex ;
var comRX[40], cmd[CMDLenMAX] ;

var InputCS, OutputCS ;

// > ? Constant/Global/Data ? <



func seroutCS(var op)
    serout(op) ;
    OutputCS ^= op ;
endfunc

func nak0()
    serout(NAK) ;
    InputCS := 0 ;
endfunc

func seroutOcs()
    serout(OutputCS) ;
    OutputCS := 0 ;
endfunc

func SendReport(var id, var objt, var objn, var val)
    seroutCS(id) ;
    seroutCS(objt) ;
    seroutCS(objn) ;
    seroutCS(val >> 8) ; // first 8 bits
    seroutCS(val) ;
    seroutOcs() ;
endfunc



func ReadObject(var ObjectType, var ObjectIdx)
    var j, k, Objects ;
    Objects := *(oObjects+ObjectType) ;

    j := 2 + ObjectIdx * 2 + Objects ;
     if (ObjectType == tForm)
        k := CurrentForm ;
    else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
        k := img_GetWord(hndl, *j, IMAGE_TAG2);
        else
        k := img_GetWord(hndl, *j, IMAGE_INDEX);
    endif
    SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
endfunc



func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
    var i, j, k, Objects ;
//    ObjectType &= 0x3f ; Why was his there? Anibuttons? Complex cascades?
//to(COM0) ; print("WriteObject ", ObjectType, " ", ObjectIdx, " ", NewVal, "\r\n") ;
    if (ObjectType == tForm)
        ActivateForm(ObjectIdx) ;
        return ;
    endif
        Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
        i := *(Objects) ;
        if (ObjectType == tLeddigits)
            img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
            ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
            return ;
        endif 
            img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
            img_Show(hndl, i) ; // will only display if form is current
    return ; // compiler bug circumvention!
endfunc



// WARNING, this code will crash if newval exceeds maximum displayable number
func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
    var i, j, k, l, lb, newval, num[4] ;
    if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
    newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
    i := -1 ;
    j := *(typeptr) ;
    repeat
        typeptr += 2 ;
        i++ ;
        until (*(typeptr) == imgidx);
    j := setptr + i*10 ;

    l := 0x500a | (*(j+Ofs_Digits_Digits) << 8) ;       // UDECxZ
    to(num) ;
    putnum(l, newval) ;
    imgidx++ ;
    lb := *(j+Ofs_Digits_LeadingBlanks) ;
    l := str_Ptr(num) ;
    for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
        k := str_GetByte(l++) & 0x0f ;
        if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
            if (k == 0)
                k := 10 ;
            else
                lb := 0 ;
            endif
        endif
        img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
        img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
        img_Show(hndl, imgidx);
    next
endfunc


func ActivateForm(var newform)
    var i, j, *p ;

    if (CurrentForm != -1) // deactivate old form, by disabling all inputs
        for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
            if (img_GetWord(hndl, i, IMAGE_TAG))
                img_Disable(hndl,i) ;
            endif
        next
    endif
    CurrentForm := newform ;
    // display newform image or clear to image color
    if (FormBGcolors[CurrentForm] != ColorBGimage)
        gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
        gfx_Cls() ;
        DoGFXObjects() ;                                    // display GFX 'widgets'
    endif

    // enable inputs
    for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
        j := img_GetWord(hndl, i, IMAGE_TAG) ;
        if (j)
            j-- ;
            img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
            //if (j != tKeyboard)
            if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
                img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
            endif
            img_Show(hndl,i) ; // show initialy, if required
            if (j == tForm)
                DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
            else if (j == tLeddigits)
                ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
            endif
        endif
    next



endfunc

func UpdateObjects(var newval)
    var IPidx, otherOBJ, oldvalue ;
    oldvalue := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ;
    if ( ( oldvalue != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
        img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
            img_Show(hndl, *(pInputIndex));      // only shows on current form
        IPidx := *(CurInputData+TouchState) ;
        while(IPidx != 0)
            otherOBJ := IPidx + InputData;
            if (*(otherOBJ) == OT_REPORT)
        SendReport(REPORT_EVENT, GObjectType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
            else if (*(otherOBJ) == OT_MAGIC)
                IPidx := *(otherOBJ+Ofs_IPD_P5) ;
                IPidx(newval) ;
//            else if (TouchState == *(otherOBJ+Ofs_IPD_P4))  // test prior to Workshop 6.5.0.0
            else if ((TouchState == *(otherOBJ+Ofs_IPD_P4)) || (*(CurInputData+Ofs_IPD_P1) && ((GObjectType == t4Dbutton) || (GObjectType == tUserButton) || (GObjectType == tWinButton))))
                if (*(otherOBJ) == OT_ACTIVATE)
                    ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
                    GObjectType := tForm ;
                else if (*(otherOBJ) == OT_SETCONST)
                    newval := *(otherOBJ+Ofs_IPD_P3) ;
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                else if (*(otherOBJ) == OT_SETANOTHER)
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                else if (*(otherOBJ) == OT_PREVFRAME)
                    if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
                        WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
                    endif
                    newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
                else if (*(otherOBJ) == OT_NEXTFRAME)
                    if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
                        WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
                    endif
                    newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
                endif
            endif
            IPidx := *(otherOBJ+TouchState) ;
        wend
    endif
endfunc

// End P2.inc
func DoGFXObjects()
    switch (CurrentForm)
        case 2:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 52, 304, 76, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 84, 304, 108, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 116, 304, 140, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 148, 304, 172, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 180, 304, 204, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(28, 60) ;
            putstr(" ... ") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(28, 92) ;
            putstr(" ... ") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(28, 124) ;
            putstr(" ... ") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(28, 156) ;
            putstr(" ... ") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(28, 188) ;
            putstr(" ... ") ;
        break ;
        case 3:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(156, 12, 196, 51, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(204, 12, 244, 51, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(252, 12, 292, 51, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(156, 60, 196, 99, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(204, 60, 244, 99, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(252, 60, 292, 99, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(156, 108, 196, 147, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(204, 108, 244, 147, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(252, 108, 292, 147, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(156, 156, 196, 195, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(204, 156, 244, 195, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(252, 156, 292, 195, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 208, 293, 227, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(28, 216) ;
            putstr(" ... ") ;
        break ;
        case 4:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 40, 296, 64, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 72, 296, 96, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 104, 296, 128, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 136, 296, 160, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 168, 296, 192, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(20, 200, 296, 224, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(136, 52) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(132, 116) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(128, 180) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(116, 84) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(116, 148) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(116, 212) ;
            putstr("...") ;
        break ;
        case 5:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(12, 44, 304, 69, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(12, 76, 304, 101, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(12, 108, 304, 133, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(12, 140, 304, 165, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(12, 172, 304, 198, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(12, 204, 304, 229, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(116, 56) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(120, 120) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(120, 184) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(108, 88) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(108, 152) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(108, 212) ;
            putstr("...") ;
        break ;
        case 6:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(16, 40, 303, 65, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(16, 72, 303, 97, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(16, 104, 303, 129, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(16, 136, 303, 161, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(16, 168, 303, 193, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(16, 200, 303, 225, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(124, 52) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(120, 116) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(120, 180) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(120, 84) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(120, 148) ;
            putstr("...") ;
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(BLACK) ;
            txt_BGcolour(0x07E0) ;
            gfx_MoveTo(120, 212) ;
            putstr("...") ;
        break ;
        case 7:
            txt_FontID(FONT1);
            txt_Attributes(BOLD+ITALIC >> 4) ; // >> 4 fix for r25 PmmC
            txt_FGcolour(0x07E0) ;
            txt_BGcolour(BLACK) ;
            gfx_MoveTo(184, 36) ;
            putstr(". . .") ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(56, 68, 247, 87, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(60, 144, 251, 163, 0x07E0) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
        break ;
    endswitch
endfunc

// Start P3.inc
func main()
    var comTX[50], cmdi, i, j, TouchStatus ;


    gfx_ScreenMode(LANDSCAPE) ;

    putstr("Mounting...\n");
    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    endif

//    gfx_MoveTo(0, 0);
//    print(mem_Heap()," ") ;
//    gfx_TransparentColour(0x0020);
//    gfx_Transparency(ON);


    // open image control
    hndl := file_LoadImageControl("TEST1~1.dat", "TEST1~1.gci", 1);


    // init 'constants'
// End P3.inc

    oObjects[tDipSwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tKnob] := oDipSwitchs ; // dummy as no object there
    oObjects[tRockerSwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tRotarySwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tGSlider] := oDipSwitchs ; // dummy as no object there
    oObjects[tTrackbar] := oDipSwitchs ; // dummy as no object there
    oObjects[tWinButton] := oDipSwitchs ; // dummy as no object there
    oObjects[tAngularmeter] := oDipSwitchs ; // dummy as no object there
    oObjects[tCoolgauge] := oDipSwitchs ; // dummy as no object there
    oObjects[tCustomdigits] := oDipSwitchs ; // dummy as no object there
    oObjects[tForm] := oForms ;
    oObjects[tGauge] := oDipSwitchs ; // dummy as no object there
    oObjects[tImage] := oDipSwitchs ; // dummy as no object there
    oObjects[tKeyboard] := oDipSwitchs ; // dummy as no object there
    oObjects[tLed] := oDipSwitchs ; // dummy as no object there
    oObjects[tLeddigits] := oLeddigitss ;
    oObjects[tMeter] := oDipSwitchs ; // dummy as no object there
    oObjects[tStrings] := oDipSwitchs ; // dummy as no object there
    oObjects[tThermometer] := oDipSwitchs ; // dummy as no object there
    oObjects[tUserled] := oUserleds ;
    oObjects[tVideo] := oDipSwitchs ; // dummy as no object there
    oObjects[tStaticText] := oStaticTexts ;
    oObjects[tSounds] := oDipSwitchs ; // dummy as no object there
    oObjects[tTimer] := oDipSwitchs ; // dummy as no object there
    oObjects[tSpectrum] := oDipSwitchs ; // dummy as no object there
    oObjects[tTank] := oDipSwitchs ; // dummy as no object there
    oObjects[tUserImages] := oDipSwitchs ; // dummy as no object there
    oObjects[tPinOutput] := oDipSwitchs ; // dummy as no object there
    oObjects[tPinInput] := oDipSwitchs ; // dummy as no object there
    oObjects[t4Dbutton] := oDipSwitchs ; // dummy as no object there
    oObjects[tAniButton] := oDipSwitchs ; // dummy as no object there
    oObjects[tColorPicker] := oDipSwitchs ; // dummy as no object there
    oObjects[tUserButton] := oDipSwitchs ; // dummy as no object there
// Start P4.inc

    // init comms
    com_Init(comRX,CMDLenMAX,0);
    com_SetBaud(COM0,25600);
    com_TXbuffer(comTX, 100, 0);
    // tag 'real' objects
    for (i := 0; i <= MaxTotObjects; i++)
        if (   (i != tSounds)
            && (i != tTimer)
            && (i != tPinOutput)
            && (i != tPinInput) )
            TouchXpos := oObjects[i] ;
            TouchYpos := *(TouchXpos) ;
            for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
                oldn := *(TouchXpos+ImageTouched*2) ;
                img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
                if (oldn != -1)
                    img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
                    img_Disable(hndl, oldn) ;
                endif
            next
        endif
    next


    // display initial form
    CurrentForm := -1 ;
// End P4.inc
// Start P5.inc
    ActivateForm(7) ; // need to change this according to first actual form

// End P5.inc
// Start P6.inc Diablo
    touch_Set(TOUCH_ENABLE);                            // enable the touch screen
    oldn := -1 ;
    repeat

        // check comms for command, how to NAK invalid command
        if (com_Count() != 0)
            i := serin() ;
            InputCS ^= i ;               // update checksum
                cmd[cmdi++] := i ;
                 if (   (cmd[0] == READ_OBJ)
                         && (cmdi == 4)         )
                    if (InputCS)
                        nak0() ;
                    else
                        ReadObject(cmd[1], cmd[2]) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
                         && (cmdi == 6)          )
                    if (InputCS)
                        nak0() ;
                    else
                        WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_CONTRAST)
                         && (cmdi == 3)         )
                    if (InputCS)
                        nak0() ;
                    else
                        gfx_Contrast(cmd[1]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
                    nak0() ;
                    cmdi := 0 ;
                endif
        endif   // a character is available


    // touch code processing

        TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
        if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
            ImageTouched := img_Touched(hndl,-1) ;
            if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
                TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
            endif
            if (TouchStatus != TOUCH_RELEASED)        // if not released
                if (oldn != -1)
                    ImageTouched := oldn ;
                else
                    if (oldn != ImageTouched)
                oldn := ImageTouched ;
                        TouchStatus := TOUCH_PRESSED ;
                    endif
                endif
                TouchXpos  := touch_Get(TOUCH_GETX);
                TouchYpos  := touch_Get(TOUCH_GETY);
                TouchState := Ofs_IPD_DOWN ;
            else
                ImageTouched := oldn ;                     // simulate release of what we touched
                oldn := -1 ;                    // prevent double release
                TouchState := Ofs_IPD_RELEASE ;
            endif
            if (ImageTouched >= 0)
                        CurInputData := InputControls[ImageTouched] + InputData;
                        GObjectType := *(CurInputData) ;
                        i := GObjectType ;
                        if (GObjectType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
                        gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
            endif
        endif
 //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it

        sys_EventsResume() ;
    forever

ciSwitch:
cDipswitch:

cKnob:
ciDial:

cRockerswitch:

cRotaryswitch:

cSlider:
cTrackbar:
ciSlider:

ciButton:

c4DButton:
cUserButton:
cWinbutton:

cAniButton:

cColorPicker:

endfunc
// End P6.inc
